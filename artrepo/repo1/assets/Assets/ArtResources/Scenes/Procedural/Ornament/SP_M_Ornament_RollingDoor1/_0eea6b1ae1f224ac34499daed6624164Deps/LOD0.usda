#usda 1.0
(
    endTimeCode = 0
    startTimeCode = 0
    upAxis = "Y"
)

def Mesh "LOD0"
{
    uniform bool doubleSided
    float3[] extent = [(-1.0000013, -4.7683716e-7, -0.22500038), (1.0000013, 2.0000002, 0.12535465)]
    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 7, 6, 5, 8, 9, 10, 11, 9, 8, 12, 13, 14, 15, 14, 13, 16, 17, 18, 19, 18, 17, 20, 21, 22, 23, 22, 21, 24, 25, 26, 27, 26, 25, 28, 29, 30, 30, 29, 31, 31, 32, 30, 33, 30, 32, 34, 35, 36, 37, 35, 34, 38, 39, 40, 40, 39, 41, 41, 42, 40, 43, 40, 42, 44, 45, 46, 47, 46, 45, 48, 49, 50, 51, 50, 49, 52, 53, 54, 55, 54, 53, 56, 57, 58, 59, 58, 57, 60, 61, 62, 63, 60, 62, 64, 65, 66, 67, 66, 65]
    normal3f[] normals = [(-1.5195695e-7, -1.6364608e-7, -1), (-1.5195697e-7, -1.6364608e-7, -1), (-1.5195697e-7, -1.6364608e-7, -1), (-1.5195695e-7, -1.6364608e-7, -1), (1.8702416e-7, -1, 3.0431556e-7), (1.8702416e-7, -1, 3.0431556e-7), (1.8702416e-7, -1, 3.0431553e-7), (1.8702416e-7, -1, 3.0431553e-7), (1.5195702e-7, 2.0717813e-7, 1), (1.5195702e-7, 2.0717815e-7, 1), (1.5195702e-7, 2.0717813e-7, 1), (1.5195704e-7, 2.0717815e-7, 1), (-1.5195704e-7, -2.071781e-7, -1), (-1.5195704e-7, -2.071781e-7, -1), (-1.5195704e-7, -2.071781e-7, -1), (-1.5195705e-7, -2.0717813e-7, -1), (0, -1.5258792e-7, -1), (0, -1.5258792e-7, -1), (0, -1.5258792e-7, -1), (0, -1.5258789e-7, -1), (-1.8702403e-7, 1, -1.5215778e-7), (-1.8702404e-7, 1, -1.5215778e-7), (-1.8702403e-7, 1, -1.5215778e-7), (-1.8702406e-7, 1, -1.5215778e-7), (6.6627285e-7, 3.27292e-7, -1), (6.6627285e-7, 3.27292e-7, -1), (6.662729e-7, 3.2729204e-7, -1), (6.662729e-7, 3.2729204e-7, -1), (6.8274426e-7, 3.3195664e-7, -1), (6.8274426e-7, 3.3195664e-7, -1), (6.8274414e-7, 3.3195664e-7, -1), (6.827442e-7, 3.3195664e-7, -1), (7.0719454e-7, 3.4662406e-7, -1), (7.0719454e-7, 3.466241e-7, -1), (-1.5195714e-7, 6.07828e-7, -1), (-1.5195712e-7, 6.07828e-7, -1), (-1.5195714e-7, 6.07828e-7, -1), (-1.5195712e-7, 6.07828e-7, -1), (0, 6.1972156e-7, -1), (0, 6.1972156e-7, -1), (0, 6.1972156e-7, -1), (0, 6.1972156e-7, -1), (-1.4705277e-7, 6.515964e-7, -1), (-1.4705279e-7, 6.5159645e-7, -1), (1.5195697e-7, -1.5195708e-7, -1), (1.5195695e-7, -1.5195707e-7, -1), (1.5195697e-7, -1.5195708e-7, -1), (1.5195695e-7, -1.5195707e-7, -1), (-1.8702413e-7, -1, 0), (-1.8702414e-7, -1, 0), (-1.8702414e-7, -1, 0), (-1.8702413e-7, -1, 0), (-1.51957e-7, 1.5538362e-7, 1), (-1.5195701e-7, 1.5538362e-7, 1), (-1.5195701e-7, 1.5538362e-7, 1), (-1.5195701e-7, 1.5538362e-7, 1), (1.5195704e-7, -1.5538367e-7, -1), (1.5195702e-7, -1.5538367e-7, -1), (1.5195702e-7, -1.5538367e-7, -1), (1.5195702e-7, -1.5538367e-7, -1), (0, -1.5258792e-7, -1), (0, -1.5258792e-7, -1), (0, -1.5258792e-7, -1), (0, -1.5258789e-7, -1), (1.8702403e-7, 1, -1.5215778e-7), (1.8702403e-7, 1, -1.5215778e-7), (1.8702403e-7, 1, -1.5215778e-7), (1.8702403e-7, 1, -1.5215778e-7)]
    uniform token orientation
    point3f[] points = [(-0.8158744, 0.18412668, -0.05923636), (-0.8158747, 0.9999999, -0.059236493), (-0.0000011444091, 1, -0.059236616), (-0.0000011444091, 0.18412682, -0.05923648), (-9.918213e-7, 7.6293944e-8, -0.12535219), (-9.918213e-7, 1.5258789e-7, 0.12535451), (-0.8158738, -7.6293944e-8, -0.12535207), (-0.8158738, 0, 0.12535463), (-0.8158738, 0, 0.12535463), (-0.0000011444091, 0.18412687, 0.12535448), (-0.8158744, 0.18412672, 0.1253546), (-9.918213e-7, 1.5258789e-7, 0.12535451), (-0.8158744, 0.18412668, -0.1253521), (-0.0000011444091, 0.18412682, -0.12535223), (-0.8158738, -7.6293944e-8, -0.12535207), (-9.918213e-7, 7.6293944e-8, -0.12535219), (-1.0000013, 0.9999998, -0.225), (-0.8158747, 0.9999999, -0.225), (-1.000001, -7.6293944e-8, -0.22499985), (-0.8158744, -1.14440915e-7, -0.22499985), (-0.8158744, 0.18412672, 0.1253546), (-0.0000011444091, 0.18412687, 0.12535448), (-0.8158744, 0.18412668, -0.1253521), (-0.0000011444091, 0.18412682, -0.12535223), (0.00000125885, 1.8158735, -0.059236843), (0.8158745, 1.8158735, -0.0592363), (0.0000011444091, 1.0000002, -0.05923711), (0.8158747, 1.0000002, -0.059236567), (0.000001411438, 1.8158736, -0.22500035), (0.00000125885, 2.0000002, -0.2250003), (0.8158745, 1.8158736, -0.2249998), (1.0000011, 2.0000002, -0.2249996), (1.0000013, 1.0000004, -0.22499996), (0.8158747, 1.0000004, -0.22500008), (8.7738033e-7, 1, -0.059236992), (-0.8158725, 1.8158733, -0.059236374), (7.629394e-7, 1.8158735, -0.059236497), (-0.8158723, 1, -0.05923687), (-0.8158723, 1.0000001, -0.22500038), (-0.99999917, 1, -0.22500038), (-0.8158725, 1.8158734, -0.22499987), (-0.9999992, 2, -0.22499974), (6.866455e-7, 2.0000002, -0.22499987), (7.2479247e-7, 1.8158736, -0.22500001), (0.8158696, 0.9999997, -0.059236716), (0.81586933, 0.18412639, -0.059236594), (-0.000003890991, 0.99999976, -0.05923684), (-0.000003890991, 0.18412654, -0.059236716), (-0.000004043579, -1.9073485e-7, -0.12535243), (0.81586874, -3.4332274e-7, -0.12535231), (-0.000004043579, -1.9073485e-7, 0.12535428), (0.81586874, -3.4332274e-7, 0.1253544), (0.81586933, 0.1841264, 0.12535438), (-0.000003890991, 0.18412657, 0.12535425), (0.81586874, -3.4332274e-7, 0.1253544), (-0.000004043579, -1.9073485e-7, 0.12535428), (-0.000004043579, -1.9073485e-7, -0.12535243), (-0.000003890991, 0.18412653, -0.12535246), (0.81586874, -3.4332274e-7, -0.12535231), (0.81586933, 0.18412638, -0.12535234), (0.8158696, 0.9999996, -0.22500022), (0.99999624, 0.9999996, -0.22500022), (0.99999595, -3.814697e-7, -0.22500007), (0.81586933, -4.196167e-7, -0.22500007), (0.81586933, 0.1841264, 0.12535438), (0.81586933, 0.18412638, -0.12535234), (-0.000003890991, 0.18412657, 0.12535425), (-0.000003890991, 0.18412653, -0.12535246)]
    color4f[] primvars:colors (
        elementSize = 1
        interpolation = "constant"
    )
    color3f[] primvars:displayColor = [(1, 1, 1)] (
        interpolation = "constant"
    )
    float[] primvars:displayOpacity = [1] (
        interpolation = "constant"
    )
    float2[] primvars:st = [(1, 1), (0.6666667, 1), (0.6666667, 0.6666667), (1, 0.6666667), (0, 0.6666667), (1, 0.6666667), (0, 1), (1, 1), (0, 1), (0, 0.6666667), (0, 1), (0, 0.6666667), (1, 1), (1, 0.6666667), (1, 1), (1, 0.6666667), (0.6666667, 1), (0.6666667, 1), (1, 1), (1, 1), (0, 1), (0, 0.6666667), (0, 1), (0, 0.6666666), (1, 0.6666667), (1, 1), (0.6666667, 0.6666667), (0.6666667, 1), (1, 0.6666667), (1, 0.6666667), (1, 1), (1, 1), (0.6666667, 1), (0.6666667, 1), (0.6666667, 0.6666667), (1, 1), (0.6666667, 1), (1, 0.6666667), (1, 0.6666667), (1, 0.6666667), (1, 1), (1, 1), (0.6666667, 1), (0.6666667, 1), (0.6666667, 1), (1, 1), (0.6666667, 0.6666667), (1, 0.6666667), (0, 0.6666667), (0, 1), (1, 0.6666667), (1, 1), (0, 1), (0, 0.6666667), (0, 1), (0, 0.6666667), (1, 0.6666667), (1, 0.6666667), (1, 1), (1, 1), (0.6666667, 1), (0.6666667, 1), (1, 1), (1, 1), (0, 1), (0, 1), (0, 0.6666667), (0, 0.6666666)] (
        elementSize = 1
        interpolation = "constant"
    )
    float4[] primvars:tangents = [(0, -1, 0, -1), (0, -1, 0, -1), (0, -1, 0, -1), (0, -1, 0, -1), (0, 0, 1, -1), (0, 0, 1, -1), (0, 0, 1, -1), (0, 0, 1, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (0, 1, 0, -1), (0, 1, 0, -1), (0, 1, 0, -1), (0, 1, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (-1, 0, 0, -1), (-1, 0, 0, -1), (-1, 0, 0, -1), (-1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (0, -1, 0, 1), (0, -1, 0, 1), (0, -1, 0, 1), (0, -1, 0, 1), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 1, 1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1), (1, 0, 0, -1)] (
        elementSize = 1
        interpolation = "vertex"
    )
    uniform token purpose
    token visibility
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

